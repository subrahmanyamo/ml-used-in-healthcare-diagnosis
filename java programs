 1.Write a code to get 2 integers as input and add the integers without any carry.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        System.out.println("Enter two integers separated by space:");
        int num1 = scanner.nextInt();
        int num2 = scanner.nextInt();

        // Calculate sum without carry
        int sum = 0;
        int multiplier = 1;
        while (num1 > 0 || num2 > 0) {
            int digit1 = num1 % 10;
            int digit2 = num2 % 10;
            sum += ((digit1 + digit2) % 10) * multiplier;
            num1 /= 10;
            num2 /= 10;
            multiplier *= 10;
        }

        // Output
        System.out.println("Sum without carry: " + sum);
    }
}

2.Write a code to get 2 integers A and N. Print the integer A, N times in separate line.

import java.util.Scanner;

public class PrintIntegerNTimes {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        System.out.println("Enter two integers A and N separated by space:");
        int A = scanner.nextInt();
        int N = scanner.nextInt();

        // Output A N times
        for (int i = 0; i < N; i++) {
            System.out.println(A);
        }
    }
}

4.Write a code get an integer number as input and print the sum of the digits.

import java.util.Scanner;

public class SumOfDigits {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        System.out.println("Enter an integer:");
        int number = scanner.nextInt();

        // Calculate sum of digits
        int sum = 0;
        int tempNumber = number;
        while (tempNumber > 0) {
            int digit = tempNumber % 10;
            sum += digit;
            tempNumber /= 10;
        }

        // Output
        System.out.println("Sum of digits: " + sum);
    }
}

5.Write a code to get 2 integers as input and find the HCF of the 2 integer without using recursion or Euclidean algorithm.
import java.util.Scanner;

public class HCF {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        System.out.println("Enter two integers separated by space:");
        int num1 = scanner.nextInt();
        int num2 = scanner.nextInt();

        // Find HCF
        int hcf = findHCF(num1, num2);

        // Output
        System.out.println("HCF of " + num1 + " and " + num2 + " is: " + hcf);
    }

    public static int findHCF(int num1, int num2) {
        int smallerNumber = Math.min(num1, num2);
        int hcf = 1;

        for (int i = 2; i <= smallerNumber; i++) {
            if (num1 % i == 0 && num2 % i == 0) {
                hcf = i;
            }
        }

        return hcf;
    }
}

6. You are given with an array containing only 1s and 0s.You can select two index ‘a’ and ‘b’ such that a<b in which you will change ‘1 to 0’ and ‘0 to 1’,in order to get maximum no of 1s in result.

import java.util.*;

public class MaximizeOnes {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        int[] array = new int[input.length()];
        
        // Convert input string to integer array
        for (int i = 0; i < input.length(); i++) {
            array[i] = Character.getNumericValue(input.charAt(i));
        }
        
        int maxOnes = 0;
        int maxOnesIndex = -1;
        
        // Find the index of the maximum consecutive sequence of 1s
        for (int i = 0; i < array.length; i++) {
            int count = 0;
            while (i < array.length && array[i] == 1) {
                count++;
                i++;
            }
            if (count > maxOnes) {
                maxOnes = count;
                maxOnesIndex = i - count;
            }
        }
        
        int a = -1, b = -1;
        
        // If there is a sequence of 1s, toggle the first 0 before it and the last 0 after it
        if (maxOnesIndex != -1) {
            for (int i = maxOnesIndex - 1; i >= 0; i--) {
                if (array[i] == 0) {
                    a = i + 1;
                    break;
                }
            }
            for (int i = maxOnesIndex + maxOnes; i < array.length; i++) {
                if (array[i] == 0) {
                    b = i + 1;
                    break;
                }
            }
        }
        
        System.out.println(a + " " + b);
    }
}


7. You are given a number ‘n’,count the number of 1’s in its binary string.of that number

import java.util.Scanner;

public class Binary {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input
        System.out.println("Enter the number:");
        int n = scanner.nextInt();

        // Count the number of 1's in the binary string
        int count = countOnes(n);

        // Output
        System.out.println("Number of 1's in the binary string: " + count);

        // Close the scanner
        scanner.close();
    }

    public static int countOnes(int n) {
        int count = 0;

        // Convert the number to binary string and count the number of '1's
        String binaryString = Integer.toBinaryString(n);
        for (int i = 0; i < binaryString.length(); i++) {
            if (binaryString.charAt(i) == '1') {
                count++;
            }
        }

        return count;
    }
}


8. You are given an integer ‘n’,You have to shift all the even bits with odd bits and odd bits with even bits, and print the number which is formed after manipulation in O(1) time complexity
public class SwapEvenOddBits {
    public static void main(String[] args) {
        int n = 23;
        System.out.println(swapEvenOddBits(n));
    }

    public static int swapEvenOddBits(int n) {
        int evenMask = 0xAAAAAAAA;
        int oddMask = 0x55555555;
        int evenBits = (n & evenMask) >>> 1;
        int oddBits = (n & oddMask) << 1;
        int result = evenBits | oddBits;
        return result;
    }
}


9. You are given a number ‘n’.Your task is to set all the bits to 1 in the position of range [L R] and then print the  new number. Bit count start from 1 and it starts from left
import java.util.Scanner;

public class SetBitsInRange {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int l = scanner.nextInt();
        int r = scanner.nextInt();
        System.out.println(setBitsInRange(n, l, r));
    }

    public static int setBitsInRange(int n, int l, int r) {
        int mask = ((1 << (r - l + 1)) - 1) << (l - 1);
        int result = n | mask;
        return result;
    }
}

10. You are given a number ‘n’ you have to tell whether number is divisible by 8.
Print 1 if it is divisible and 0 if it is not.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Task 1: Check if a number is divisible by 8
        int n = scanner.nextInt();
        System.out.println(isDivisibleBy8(n));

        // Task 2: Generate Floyd's Triangle
        int R = scanner.nextInt();
        floydsTriangle(R);
    }

    // Task 1: Check if a number is divisible by 8
    public static int isDivisibleBy8(int n) {
        if ((n & 7) == 0) {
            return 1;
        } else {
            return 0;
        }
    }

    // Task 2: Generate Floyd's Triangle
    public static void floydsTriangle(int rows) {
        int num = 1;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(num + " ");
                num++;
            }
            System
1.	Generate a floyd's triangle.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int R = scanner.nextInt();
        generateFloydsTriangle(R);
    }

    public static void generateFloydsTriangle(int rows) {
        int num = 1;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(num + " ");
                num++;
            }
            System.out.println();
        }
    }
}


2.	Generate a hollow half pyramid pattern using numbers.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int R = scanner.nextInt();
        hollowHalfPyramid(R);
    }

    public static void hollowHalfPyramid(int rows) {
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= i; j++) {
                if (j == 1 || j == i || i == rows) {
                    System.out.print(j);
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}


 3.Generate a hollow inverted half pyramid pattern using numbers.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int R = scanner.nextInt();
        hollowInvertedHalfPyramid(R);
    }

    public static void hollowInvertedHalfPyramid(int rows) {
        for (int i = rows; i > 0; i--) {
            for (int j = 1; j <= i; j++) {
                if (j == 1 || j == i || i == rows) {
                    System.out.print(j);
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}


 4 .Generate the following inverted character with star pattern.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int R = scanner.nextInt();
        invertedCharacterStarPattern(R);
    }

    public static void invertedCharacterStarPattern(int rows) {
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < rows; j++) {
                if (j == i || j == rows - i - 1 || i == rows - 1) {
                    System.out.print("*");
                } else {
                    System.out.print("b");
                }
            }
            System.out.println();
        }
    }
}

5. In the IPL season’s valedictory function the organizers have organized for a dance program. 
The dance has to be performed by men along with the points of the diagonals of the square of side ‘n’ and the females along with points of the borders. 
The remaining positions are filled by children. You have to determine their respective positions by writing a program.

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        danceProgramMatrix(N);
    }

    public static void danceProgramMatrix(int n) {
        char[][] matrix = new char[n][n];
        
        // Fill the matrix with 'C' characters
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = 'C';
            }
        }
        
        // Modify the matrix according to the given logic
        for (int i = 0; i < n; i++) {
            matrix[i][i] = 'M';
            matrix[i][n - i - 1] = 'F';
        }
        
        // Print the matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }
}


6. Given 2 numbers N and K, print the number after performing bitwise right shift 'K' times (up to 2 decimal places).
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        
        // Perform bitwise right shift 'K' times on number 'N'
        double result = N >> K;
        
        System.out.printf("%.2f", result);
    }
}


7.	Given 2 numbers N,K print the number after performing bitwise left shift 'K' times.
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int result = N << K;
        System.out.println(result);
    }
}

8. Print the position of the first 1 from right to left in binary representation:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int position = 1;
        while ((N & 1) == 0) {
            N >>= 1;
            position++;
        }
        System.out.println(position);
    }
}

9. Switch (swap) adjacent elements in an array:

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = scanner.nextInt();
        }
        for (int i = 0; i < N - 1; i += 2) {
            int temp = arr[i];
            arr[i] = arr[i + 1];
            arr[i + 1] = temp;
        }
        for (int i = 0; i < N; i++) {
            System.out.print(arr[i] + " ");
        }
    }
}


10.Find the bitwise XOR of array elements:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int result = 0;
        for (int i = 0; i < N; i++) {
            result ^= scanner.nextInt();
        }
        System.out.println(result);
    }
}


11. Find the maximum of elements using bitwise AND:
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int result = Integer.MAX_VALUE;
        for (int i = 0; i < N; i++) {
            result &= scanner.nextInt();
        }
        System.out.println(result);
    }
}

**// Wrapper Class
//wrapper class=Integer,Byte,Character,Float
// mainly used in collections

public class wrapperdemo {
    public static void main(String args[])
    {
int a=10;
Integer aobj=new Integer(a);//boxing - ll not support >java9
Integer aa=Integer.valueOf(a);//boxing - support >java9
Integer bobj=a; //Auto-boxing
int b=aobj.intValue(); // Unboxing 
int c=aobj;// auto-unboxing
System.out.println(b);
System.out.println(c);

    }
    
}

**// Unboxing Example

public class UnboxingExample {
 public static void main(String[] args) {
  Byte B = new Byte((byte) 10); // Byte Object
  byte b = B.byteValue(); // Unwrapping Byte object to byte data
  System.out.println(b);

  Short S = new Short((short) 20); // Short Object
  short s = S.shortValue(); // Unwrapping Short object to short data
  System.out.println(s);

  Integer I = new Integer(15); // Integer Object
  int i = I.intValue(); // Unwrapping Integer object to int data
  System.out.println(i);

  Long L = new Long(50); // Long Object
  long l = L.longValue(); // Unwrapping Long object to long data
  System.out.println(l);

  Float F = new Float(20); // Float Object
  float f = F.floatValue(); // Unwrapping Float object to float data
  System.out.println(f);

  Double D = new Double(20.5); // Double Object
  double d = D.doubleValue(); // Unwrapping Double object to double data
  System.out.println(d);

  Boolean BLN = new Boolean(true); // Boolean Object
  boolean bln = BLN.booleanValue(); // Unwrapping Boolean object to
  System.out.println(bln); // boolean data

  Character C = new Character('C'); // Character Object
  char c = C.charValue(); // Unwrapping Character object to char data
  System.out.println(c);
 }
}

**//Boxing Example
public class AutoUnboxing{
    public static void main(String[] args) {
     Byte B = new Byte((byte) 10);   //Byte Object
           byte b = B;                    //Auto-Unboxing of Byte Object
           System.out.println(b);
           
           Short S = new Short((short) 20);   //Short Object
           short s = S;                      //Auto-Unboxing of Short Object
           System.out.println(s);
           
           Integer I = new Integer(15);    //Integer Object
           int i = I;                     //Auto-Unboxing of Integer Object
           System.out.println(i);
           
           Long L = new Long(50);     //Long Object
           long l = L;               //Auto-Unboxing of Long Object
           System.out.println(l);
           
           Float F = new Float(20);      //Float Object
           float f = F;                 //Auto-Unboxing of Float Object
           System.out.println(f);
           
           Double D = new Double(20.5);   //Double Object
           double d = D;                 //Auto-Unboxing of Double Object
           System.out.println(d);
           
           Boolean BLN = new Boolean(true);      //Boolean Object
           boolean bln = BLN;                   //Auto-Unboxing of Boolean Object
           System.out.println(bln);
           
           Character C = new Character('C');    //Character Object
           char c = C;                         //Auto-Unboxing of Character Object
           System.out.println(c);
    }
   }

**//string cmparison
//1. By equals() method  ---> true or false
// 2. == operator  ---> true or false
//3. CompareTo() method ---->s1,s2==0,,s1> results +1 , s2>-->-1

public class StringCompare {
    public static void main(String[] args)
    {
        String s1="hello";
        String s2="Hello";
        String s3="Welcome";
        String s4=new String(s1);
        System.out.println("String equals() metho");
        System.out.println(s1.equals(s2));
        System.out.println(s1.equals(s3));
        System.out.println(s1.equals(s4));

        System.out.println("String ==operator");
        System.out.println(s1==s2);
        System.out.println(s1==s3);
        System.out.println(s1==s4);

        System.out.println("String compareTo");
        System.out.println(s1.compareTo(s2));
        System.out.println(s1.compareTo(s3));
        System.out.println(s1.compareTo(s4));
        // System.out.println(s1.equalsIgnoreCase(s2));

        String myStr1 = "Hello";
String myStr2 = "hello";
System.out.println(myStr1.compareTo(myStr2));

    }
}

**//String Buffer in JAVA
// append(), insert(),replace(),delete(),reverse()

public class StringBuilder
{
    public static void main(String args[])
    {
        StringBuffer s= new StringBuffer("Welcome");
        // System.out.println(s.append("All"));



        // System.out.println(s.insert(3,"all"));
        // System.out.println(s.replace(1,3," folks"));
        // System.out.println(s.delete(2,4));
        System.out.println(s.reverse());

    }
}

**// Methods -Creating,Calling,returning,Passing
public class Methods {
    public static void main(String[] args) {
Methods obj=new Methods();//Object creation
// obj.sum(10,20); // method calling

int res=obj.sum(10,20);
System.out.println(res);

        System.out.println();
    }
    // public void sum(int a, int b) // method creation
    // {
    //     // int a=20,b=20;
    //     int c=a+b;
    //     System.out.println(c);
    // }
    public int sum(int a, int b) // method creation, passing
    {
        // int a=20,b=20;
        int c=a+b;
     return c;
    }
}

**//Methods - Built in 

public class Methodstypes {
    public static void main(String[] args) {
     Methodstypes obj=new Methodstypes();
     obj.display();    
    
    }

    public void display()
    {
        System.out.println("Welcome folks");
    }
    public int display1()
    {
        System.out.println("Welcome folks");
     return 0;
    }
}

**//Array Intro -1.holds more than one value in same DT
// int a=10,b=20
// a[5]={1,2,3,4,5}
//Declaration --> int[]=; int  []=; int a[];
public class arrayintro {
    
    public static void main(String[] args) {
         int a[]=new int[5];
         a[0]=10;
         a[1]=10;
         a[2]=10;
         a[4]=10;
        System.out.println(a[2]);

        // int a[]={10,20,34,55};
        
        // System.out.println(a[2]);
    } 
}

**//Array Intro -1.holds more than one value in same DT
// int a=10,b=20
// a[5]={1,2,3,4,5}
//Declaration --> int[]=; int  []=; int a[];
public class arrayintro {
    
    public static void main(String[] args) {
         int a[]=new int[5];
         a[0]=10;
         a[1]=10;
         a[2]=10;
         a[4]=10;
        System.out.println(a[2]);

        // int a[]={10,20,34,55};
        
        // System.out.println(a[2]);
    } 
}

**// Data Read and Write from console
import java.util.*;
// import java.io.*;
public class ArrayProcess {
    public static void main(String[] args) {
        int a[]=new int[5];
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter Array value");
        for(int i=0;i<a.length;i++)
        {
            a[i]=sc.nextInt();
        }
        System.out.println("Values Are");
     for(int i=0;i<a.length;i++)
     {
        System.out.println(a[i]);
     }
    // Scanner sc=new Scanner(System.in);
    // System.out.println("Enter the Size:");
    // int n=sc.nextInt();
    // int a[]=new int[n];
    // System.out.println("Enter Array value");
    //     for(int i=0;i<a.length;i++)
    //     {
    //         a[i]=sc.nextInt();
    //     }
    //     System.out.println("Values Are");
    //  for(int i=0;i<a.length;i++)
    //  {
    //     System.out.println(a[i]);
    //  }
    }
}

**// Array method
public class CallingMethod {
    public static void main(String[] args) {
    
         CallingMethod obj=new CallingMethod();
         //int a[]={1,2,3,4,5};
         int ans[]=obj.display();
         System.out.println(ans[2]);
    }
    int[] display()
    {
        int b[]={10,20,30};
    return b;
    }

}


// 1. Sum of maximum elements obtained by considering all consecutive pairs of adjacent elements

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] array = new int[N];
        for (int i = 0; i < N; i++) {
            array[i] = scanner.nextInt();
        }
        int sum = 0;
        for (int i = 0; i < N - 1; i++) {
            sum += Math.max(array[i], array[i + 1]);
        }
        System.out.println(sum);
    }
}


// 2. Sort the array in increasing order and print the original indices of the elements present in sorted array

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] array = new int[N];
        for (int i = 0; i < N; i++) {
            array[i] = scanner.nextInt();
        }
        int[] sortedArray = array.clone();
        Arrays.sort(sortedArray);
        Map<Integer, Integer> indicesMap = new HashMap<>();
        for (int i = 0; i < N; i++) {
            indicesMap.put(sortedArray[i], i + 1);
        }
        for (int i = 0; i < N; i++) {
            System.out.print(indicesMap.get(array[i]) + " ");
        }
    }
}

// 3. Find the number of rotations made to the array

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int M = scanner.nextInt();
        int[] array = new int[M];
        for (int i = 0; i < M; i++) {
            array[i] = scanner.nextInt();
        }
        int N = -1;
        for (int i = 1; i < M; i++) {
            if (array[i] < array[i - 1]) {
                N = i;
                break;
            }
        }
        System.out.println(N);
    }
}

// 4. Find the Bitwise XOR of the array elements

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int result = 0;
        for (int i = 0; i < N; i++) {
            result ^= scanner.nextInt();
        }
        System.out.println(result);
    }
}

// 5. Count the maximum number of times a character is repeated in the string

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.next();
        Map<Character, Integer> frequencyMap = new HashMap<>();
        for (char c : S.toCharArray()) {
            frequencyMap.put(c, frequencyMap.getOrDefault(c, 0) + 1);
        }
        int maxFrequency = 0;
        for (int freq : frequencyMap.values()) {
            maxFrequency = Math.max(maxFrequency, freq);
        }
        System.out.println(maxFrequency > 1 ? maxFrequency : 0);
    }
}

// 6. Find the minimal number of snow drifts that need to be created for Vishal to reach any snow drift from any other

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        Set<Integer> xCoordinates = new HashSet<>();
        Set<Integer> yCoordinates = new HashSet<>();
        for (int i = 0; i < N; i++) {
            int x = scanner.nextInt();
            int y = scanner.nextInt();
            xCoordinates.add(x);
            yCoordinates.add(y);
        }
        int minSnowDrifts = Math.min(xCoordinates.size(), yCoordinates.size());
        System.out.println(minSnowDrifts);
    }
}

// 7. Find the absolute minimum difference between any two elements in the array

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] array = new int[N];
        for (int i = 0; i < N; i++) {
            array[i] = scanner.nextInt();
        }
        Arrays.sort(array);
        int minDifference = Integer.MAX_VALUE;
        for (int i = 1; i < N; i++) {
            minDifference = Math.min(minDifference, array[i] - array[i - 1]);
        }
        System.out.println(minDifference);
    }
}

// 8. Check whether two strings differ exactly by K characters

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s1 = scanner.next();
        String s2 = scanner.next();
        int K = scanner.nextInt();
        if (s1.length() != s2.length()) {
            System.out.println("no");
            return;
        }
        int diffCount = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                diffCount++;
            }
        }
        System.out.println(diffCount == K ? "yes" : "no");
    }
}

// 9. Count the number of distinct pairs (i,j) such that i < j and A[i] < A[j]

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int[] array = new int[N];
        for (int i = 0; i < N; i++) {
            array[i] = scanner.nextInt();
        }
        int pairCount = 0;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                if (array[i] < array[j]) {
                    pairCount++;
                }
            }
        }
        System.out.println(pairCount > 0 ? pairCount : -1);
    }
}


// 10. Check if there exists any 2 numbers in the array with sum equal to X

import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int X = scanner.nextInt();
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < N; i++) {
            int num

// 11. Count the number of perfect squares within a given range (inclusive)

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int L = scanner.nextInt();
        int R = scanner.nextInt();
        int count = 0;
        for (int i = L; i <= R; i++) {
            int sqrt = (int) Math.sqrt(i);
            if (sqrt * sqrt == i) {
                count++;
            }
        }
        System.out.println(count > 0 ? count : -1);
    }
}


// 12. Print the number(s) that has been repeated K times in the array

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeSet;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        int K = scanner.nextInt();
        int[] array = new int[N];
        for (int i = 0; i < N; i++) {
            array[i] = scanner.nextInt();
        }
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        for (int num : array) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }
        TreeSet<Integer> results = new TreeSet<>();
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            if (entry.getValue() == K) {
                results.add(entry.getKey());
            }
        }
        if (results.isEmpty()) {
            System.out.println(-1);
        } else {
            for (int num : results) {
                System.out.print(num + " ");
            }
        }
    }
}


// 13. Check if the parentheses in a string are balanced

import java.util.Scanner;
import java.util.Stack;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String S = scanner.nextLine();
        Stack<Character> stack = new Stack<>();
        for (char c : S.toCharArray()) {
            if (c == '(') {
                stack.push(c);
            } else if (c == ')') {
                if (stack.isEmpty() || stack.pop() != '(') {
                    System.out.println("no");
                    return;
                }
            }
        }
        System.out.println(stack.isEmpty() ? "yes" : "no");
    }
}

// 14. Reverse the words in a string in reverse saturated order

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String[] words = scanner.nextLine().split(" ");
        for (String word : words) {
            for (int i = word.length() - 1; i >= 0; i--) {
                System.out.print(word.charAt(i));
            }
            System.out.print(" ");
        }
    }
}

// 1. Matrix multiplication

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mat1Rows = scanner.nextInt();
        int mat1Cols = scanner.nextInt();
        int[][] mat1 = new int[mat1Rows][mat1Cols];
        for (int i = 0; i < mat1Rows; i++) {
            for (int j = 0; j < mat1Cols; j++) {
                mat1[i][j] = scanner.nextInt();
            }
        }
        int mat2Rows = scanner.nextInt();
        int mat2Cols = scanner.nextInt();
        int[][] mat2 = new int[mat2Rows][mat2Cols];
        for (int i = 0; i < mat2Rows; i++) {
            for (int j = 0; j < mat2Cols; j++) {
                mat2[i][j] = scanner.nextInt();
            }
        }
        if (mat1Cols != mat2Rows) {
            System.out.println("invalid");
            return;
        }
        int[][] result = new int[mat1Rows][mat2Cols];
        for (int i = 0; i < mat1Rows; i++) {
            for (int j = 0; j < mat2Cols; j++) {
                for (int k = 0; k < mat1Cols; k++) {
                    result[i][j] += mat1[i][k] * mat2[k][j];
                }
            }
        }
        for (int i = 0; i < mat1Rows; i++) {
            for (int j = 0; j < mat2Cols; j++) {
                System.out.print(result[i][j] + " ");
            }
        }
    }
}


// 2. Calculate area of rectangles

import java.util.Scanner;

class Rectangle {
    int length;
    int breadth;

    Rectangle(int l, int b) {
        this.length = l;
        this.breadth = b;
    }

    int area() {
        return length * breadth;
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int a = scanner.nextInt();
        int b = scanner.nextInt();
        Rectangle rectangle1 = new Rectangle(a, b);
        int c = scanner.nextInt();
        int d = scanner.nextInt();
        Rectangle rectangle2 = new Rectangle(c, d);
        System.out.println(rectangle1.area() + " " + rectangle2.area());
    }
}


// 3. Calculate area of a triangle

import java.util.Scanner;

class Triangle {
    double base;
    double height;

    Triangle() {
        Scanner scanner = new Scanner(System.in);
        this.base = scanner.nextDouble();
        this.height = scanner.nextDouble();
    }

    double area() {
        return 0.5 * base * height;
    }
}

public class Main {
    public static void main(String[] args) {
        Triangle triangle = new Triangle();
        System.out.println(triangle.area());
    }
}


// 4. Bank Transfers Interface

interface BankTransfers {
    String encrypt(String a);
    String decrypt(String a);
}

class ICICI implements BankTransfers {
    public String encrypt(String a) {
        StringBuilder encrypted = new StringBuilder();
        for (char c : a.toCharArray()) {
            encrypted.append((char)(c + 1)).append("1");
        }
        return encrypted.toString();
    }

    public String decrypt(String a) {
        StringBuilder decrypted = new StringBuilder();
        for (int i = 0; i < a.length(); i += 2) {
            decrypted.append((char)(a.charAt(i) - 1));
        }
        return decrypted.toString();
    }
}

class HDFC implements BankTransfers {
    public String encrypt(String a) {
        StringBuilder encrypted = new StringBuilder();
        for (int i = 0; i < a.length(); i++) {
            char c = a.charAt(i);
            if (c != ' ') {
                if (i % 2 == 0) {
                    encrypted.append((char)(c + 1));
                } else {
                    encrypted.append((char)(c - 1));
                }
            }
        }
        return encrypted.toString();
    }

    public String decrypt(String a) {
        StringBuilder decrypted = new StringBuilder();
        for (char c : a.toCharArray()) {
            decrypted.append((char)(c - 1));
        }
        return decrypted.toString();
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int bankType = scanner.nextInt();
        String userName = scanner.next();
        String input = scanner.nextLine().trim();
        BankTransfers bank;
        if (bankType == 1) {
            bank = new ICICI();
        } else if (bankType == 2) {
            bank = new HDFC();
        } else {
            System.out.println("Invalid 


// 5. Calculate perimeter of a triangle

import java.util.Scanner;

class Triangle {
    double side1;
    double side2;
    double side3;

    Triangle() {
        Scanner scanner = new Scanner(System.in);
        this.side1 = scanner.nextDouble();
        this.side2 = scanner.nextDouble();
        this.side3 = scanner.nextDouble();
    }

    double perimeter() {
        return side1 + side2 + side3;
    }
}

public class Main {
    public static void main(String[] args) {
        Triangle triangle = new Triangle();
        System.out.println(triangle.perimeter());
    }
}


// 6. Matrix class

import java.util.Scanner;

class Matrix {
    int[][] matrix;

    Matrix(int rows, int cols) {
        matrix = new int[rows][cols];
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[i][j] = scanner.nextInt();
            }
        }
    }

    void printRows() {
        System.out.println(matrix.length);
    }

    void printCols() {
        if (matrix.length == 0) {
            System.out.println("invalid");
            return;
        }
        System.out.println(matrix[0].length);
    }

    void printElements() {
        if (matrix.length == 0 || matrix[0].length == 0) {
            System.out.println("invalid");
            return;
        }
        for (int[] row : matrix) {
            for (int elem : row) {
                System.out.print(elem + " ");
            }
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String input = scanner.nextLine();
        St

// 7. Abstract class for Account

import java.util.Scanner;

abstract class Account {
    private String accountNumber;
    private double balance;
    private String holderName;

    Account(String accNumber, double bal, String name) {
        this.accountNumber = accNumber;
        this.balance = bal;
        this.holderName = name;
    }

    abstract double calculateServiceTax(int type);

    void display() {
        System.out.println("Your remaining balance is Rs." + balance);
    }

    // Getters and setters
    public String getAccountNumber() {
        return accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public String getHolderName() {
        return holderName;
    }

    public void setHolderName(String holderName) {
        this.holderName = holderName;
    }
}

class CheckingAccount extends Account {
    CheckingAccount(String accNumber, double bal, String name) {
        super(accNumber, bal, name);
    }

    @Override
    double calculateServiceTax(int type) {
        return super.getBalance() * 0.2; // 20% service tax
    }
}

class SavingsAccount extends Account {
    SavingsAccount(String accNumber, double bal, String name) {
        super(accNumber, bal, name);
    }

    @Override
    double calculateServiceTax(int type) {
        return super.getBalance() * 0.1; // 10% service tax
    }
}

class DematAccount extends Account {
    DematAccount(String accNumber, double bal, String name) {
        super(accNumber, bal, name);
    }

    @Override
    double calculateServiceTax(int type) {
        return super.getBalance() * 0.05; // 5% service tax
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String accType = scanner.next();
        String name = scanner.next();
        String accNumber = scanner.next();
        double balance = scanner.nextDouble();
        int transactionAmount = scanner.nextInt();

        Account account;
        if (accType.equals("Checking")) {
            account = new CheckingAccount(accNumber, balance, name);
        } else if (accType.equals("Savings")) {
            account = new SavingsAccount(accNumber, balance, name);
        } else if (accType.equals("Demat")) {
            account = new DematAccount(accNumber, balance, name);
        } else {
            System.out.println("Invalid input");
            return;
        }

        double serviceTax = account.calculateServiceTax(1);
        double newBalance = account.getBalance() - transactionAmount - serviceTax;
        account.setBalance(newBalance);

        account.display();
    }
}


// 8. Interface Notification

interface Notification {
    void notificationBySms();
    void notificationByEmail();
    void notificationByCourier();
}

class Icici implements Notification {
    public void notificationBySms() {
        System.out.println("ICICI - Notification By SMS");
    }

    public void notificationByEmail() {
        System.out.println("ICICI - Notification By Email");
    }

    public void notificationByCourier() {
        System.out.println("ICICI - Notification By Courier");
    }
}

class Hdfc implements Notification {
    public void notificationBySms() {
        System.out.println("HDFC - Notification By SMS");
    }

    public void notificationByEmail() {
        System.out.println("HDFC - Notification By Email");
    }

    public void notificationByCourier() {
        System.out.println("HDFC - Notification By Courier");
    }
}

class BankFactory {
    public Icici getIcici() {
        return new Icici();
    }

    public Hdfc getHdfc() {
        return new Hdfc();
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int bankType = scanner.nextInt();
        int notificationType = scanner.nextInt();

        BankFactory bankFactory = new BankFactory();
        Notification notification;

        if (bankType == 1) {
            notification = bankFactory.getIcici();
        } else if (bankType == 2) {
            notification = bankFactory.getHdfc();
        } else {
            System.out.println("Invalid input");
            return;
        }

        switch (notificationType) {
            case 1:
                notification.notificationBySms();
                break;
            case 2:
                notification.notificationByEmail();
                break;
            case 3:
                notification.notificationByCourier();
                break;
            default:
                System.out.println("Invalid input");
        }
    }
}


// 9. RBI credit score calculation

import java.util.Scanner;

interface Banks {
    double calculateCreditScore();
}

class RBI implements Banks {
    private String accountNumber;
    private double creditScore;
    private String holderName;
    private static final double CREDIT = 0.10;

    RBI(String accNumber, double score, String name) {
        this.accountNumber = accNumber;
        this.creditScore = score;
        this.holderName = name;
    }

    public double calculateCreditScore() {
        return CREDIT * creditScore;
    }

    void display(double amount) {
        double newCreditScore = calculateCreditScore();
        System.out.println("Hi, " + holderName);
        System.out.println("You have gained " + newCreditScore + " credit score for the payment of " + amount);
        System.out.println("Your Total Credit Score is " + (creditScore + newCreditScore));
    }
}

class ICICI extends RBI {
    ICICI(String accNumber, double score, String name) {
        super(accNumber, score, name);
    }
}

class HDFC extends RBI {
    HDFC(String accNumber, double score, String name) {
        super(accNumber, score, name);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String bankName = scanner.next();
        String holderName = scanner.next();
        String accNumber = scanner.next();
        double creditScore = scanner.nextDouble();
        double amount = scanner.nextDouble();

        Banks bank;
        if (bankName.equals("ICICI")) {
            bank = new ICICI(accNumber, creditScore, holderName);
        } else if (bankName.equals("HDFC")) {
            bank = new HDFC(accNumber, creditScore, holderName);
        } else {
            System.out.println("Invalid input");
            return;
        }

        bank.display(amount);
    }
}


// 10. Employee salary calculation

import java.util.Scanner;

class Employee {
    private double salary;
    private int workHours;

    void getInfo(double salary, int workHours) {
        this.salary = salary;
        this.workHours = workHours;
    }

    void addSal() {
        if (salary < 500) {
            salary += 100;
        }
    }

    void addWorkSal(int amount) {
        salary += amount;
    }

    void display()

// 11. Circle class

import java.util.Scanner;

class Circle {
    double radius;

    Circle() {
        Scanner scanner = new Scanner(System.in);
        this.radius = scanner.nextDouble();
    }

    double area() {
        return Math.PI * radius * radius;
    }

    double circumference() {
        return 2 * Math.PI * radius;
    }
}

public class Main {
    public static void main(String[] args) {
        Circle circle = new Circle();
        System.out.println(String.format("%.1f", circle.area()));
        System.out.println(String.format("%.1f", circle.circumference()));
    }
}


// 12. Matrix multiplication

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int mat1Rows = scanner.nextInt();
        int mat1Cols = scanner.nextInt();
        int[][] mat1 = new int[mat1Rows][mat1Cols];
        for (int i = 0; i < mat1Rows; i++) {
            for (int j = 0; j < mat1Cols; j++) {
                mat1[i][j] = scanner.nextInt();
            }
        }
        int mat2Rows = scanner.nextInt();
        int mat2Cols = scanner.nextInt();
        int[][] mat2 = new int[mat2Rows][mat2Cols];
        for (int i = 0; i < mat2Rows; i++) {
            for (int j = 0; j < mat2Cols; j++) {
                mat2[i][j] = scanner.nextInt();
            }
        }
        if (mat1Cols != mat2Rows) {
            System.out.println("invalid");
            return;
        }
        int[][] result = new int[mat1Rows][mat2Cols];
        for (int i = 0; i < mat1Rows; i++) {
            for (int j = 0; j < mat2Cols; j++) {
                for (int k = 0; k < mat1Cols; k++) {
                    result[i][j] += mat1[i][k] * mat2[k][j];
                }
            }
        }
        for (int i = 0; i < mat1Rows; i++) {
            for (int j = 0; j < mat2Cols; j++) {
                System.out.print(result[i][j] + " ");
            }
        }
    }
}





















